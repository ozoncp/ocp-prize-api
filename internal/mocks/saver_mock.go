// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-prize-api/internal/saver (interfaces: ISaver)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	prize "github.com/ozoncp/ocp-prize-api/internal/prize"
	saver "github.com/ozoncp/ocp-prize-api/internal/saver"
	reflect "reflect"
)

// MockISaver is a mock of ISaver interface
type MockISaver struct {
	ctrl     *gomock.Controller
	recorder *MockISaverMockRecorder
}

// MockISaverMockRecorder is the mock recorder for MockISaver
type MockISaverMockRecorder struct {
	mock *MockISaver
}

// NewMockISaver creates a new mock instance
func NewMockISaver(ctrl *gomock.Controller) *MockISaver {
	mock := &MockISaver{ctrl: ctrl}
	mock.recorder = &MockISaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISaver) EXPECT() *MockISaverMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockISaver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockISaverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISaver)(nil).Close))
}

// GetState mocks base method
func (m *MockISaver) GetState() saver.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(saver.State)
	return ret0
}

// GetState indicates an expected call of GetState
func (mr *MockISaverMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockISaver)(nil).GetState))
}

// Init mocks base method
func (m *MockISaver) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockISaverMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISaver)(nil).Init))
}

// Save mocks base method
func (m *MockISaver) Save(arg0 prize.Prize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockISaverMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockISaver)(nil).Save), arg0)
}
