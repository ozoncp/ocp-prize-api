// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-prize-api/internal/flusher (interfaces: IFlusher)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	prize "github.com/ozoncp/ocp-prize-api/internal/prize"
	reflect "reflect"
)

// MockIFlusher is a mock of IFlusher interface
type MockIFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockIFlusherMockRecorder
}

// MockIFlusherMockRecorder is the mock recorder for MockIFlusher
type MockIFlusherMockRecorder struct {
	mock *MockIFlusher
}

// NewMockIFlusher creates a new mock instance
func NewMockIFlusher(ctrl *gomock.Controller) *MockIFlusher {
	mock := &MockIFlusher{ctrl: ctrl}
	mock.recorder = &MockIFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFlusher) EXPECT() *MockIFlusherMockRecorder {
	return m.recorder
}

// Flush mocks base method
func (m *MockIFlusher) Flush(arg0 context.Context, arg1 []prize.Prize) ([]prize.Prize, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0, arg1)
	ret0, _ := ret[0].([]prize.Prize)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Flush indicates an expected call of Flush
func (mr *MockIFlusherMockRecorder) Flush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockIFlusher)(nil).Flush), arg0, arg1)
}
