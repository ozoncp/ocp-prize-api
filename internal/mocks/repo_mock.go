// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-prize-api/internal/repo (interfaces: IRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	prize "github.com/ozoncp/ocp-prize-api/internal/prize"
	reflect "reflect"
)

// MockIRepo is a mock of IRepo interface
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// AddPrizes mocks base method
func (m *MockIRepo) AddPrizes(arg0 []prize.Prize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrizes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrizes indicates an expected call of AddPrizes
func (mr *MockIRepoMockRecorder) AddPrizes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrizes", reflect.TypeOf((*MockIRepo)(nil).AddPrizes), arg0)
}

// DescribePrize mocks base method
func (m *MockIRepo) DescribePrize(arg0 uint64) (*prize.Prize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePrize", arg0)
	ret0, _ := ret[0].(*prize.Prize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePrize indicates an expected call of DescribePrize
func (mr *MockIRepoMockRecorder) DescribePrize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePrize", reflect.TypeOf((*MockIRepo)(nil).DescribePrize), arg0)
}

// ListPrizes mocks base method
func (m *MockIRepo) ListPrizes(arg0, arg1 uint64) ([]prize.Prize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrizes", arg0, arg1)
	ret0, _ := ret[0].([]prize.Prize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrizes indicates an expected call of ListPrizes
func (mr *MockIRepoMockRecorder) ListPrizes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrizes", reflect.TypeOf((*MockIRepo)(nil).ListPrizes), arg0, arg1)
}

// RemovePrize mocks base method
func (m *MockIRepo) RemovePrize(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePrize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePrize indicates an expected call of RemovePrize
func (mr *MockIRepoMockRecorder) RemovePrize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrize", reflect.TypeOf((*MockIRepo)(nil).RemovePrize), arg0)
}
