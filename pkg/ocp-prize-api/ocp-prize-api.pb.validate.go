// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-prize-api/ocp-prize-api.proto

package ocp_prize_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListPrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListPrizeV1RequestValidationError is the validation error returned by
// ListPrizeV1Request.Validate if the designated constraints aren't met.
type ListPrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPrizeV1RequestValidationError) ErrorName() string {
	return "ListPrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPrizeV1RequestValidationError{}

// Validate checks the field values on ListPrizeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPrizes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPrizeV1ResponseValidationError{
					field:  fmt.Sprintf("Prizes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPrizeV1ResponseValidationError is the validation error returned by
// ListPrizeV1Response.Validate if the designated constraints aren't met.
type ListPrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPrizeV1ResponseValidationError) ErrorName() string {
	return "ListPrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPrizeV1ResponseValidationError{}

// Validate checks the field values on CreatePrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Link

	// no validation rules for IssueId

	return nil
}

// CreatePrizeV1RequestValidationError is the validation error returned by
// CreatePrizeV1Request.Validate if the designated constraints aren't met.
type CreatePrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePrizeV1RequestValidationError) ErrorName() string {
	return "CreatePrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePrizeV1RequestValidationError{}

// Validate checks the field values on CreatePrizeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PrizeId

	return nil
}

// CreatePrizeV1ResponseValidationError is the validation error returned by
// CreatePrizeV1Response.Validate if the designated constraints aren't met.
type CreatePrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePrizeV1ResponseValidationError) ErrorName() string {
	return "CreatePrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePrizeV1ResponseValidationError{}

// Validate checks the field values on MultiCreatePrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreatePrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPrizes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreatePrizeV1RequestValidationError{
					field:  fmt.Sprintf("Prizes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreatePrizeV1RequestValidationError is the validation error returned by
// MultiCreatePrizeV1Request.Validate if the designated constraints aren't met.
type MultiCreatePrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreatePrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreatePrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreatePrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreatePrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreatePrizeV1RequestValidationError) ErrorName() string {
	return "MultiCreatePrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreatePrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreatePrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreatePrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreatePrizeV1RequestValidationError{}

// Validate checks the field values on MultiCreatePrizeV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreatePrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreatePrizeV1ResponseValidationError is the validation error returned
// by MultiCreatePrizeV1Response.Validate if the designated constraints aren't met.
type MultiCreatePrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreatePrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreatePrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreatePrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreatePrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreatePrizeV1ResponseValidationError) ErrorName() string {
	return "MultiCreatePrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreatePrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreatePrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreatePrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreatePrizeV1ResponseValidationError{}

// Validate checks the field values on UpdatePrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Link

	// no validation rules for IssueId

	return nil
}

// UpdatePrizeV1RequestValidationError is the validation error returned by
// UpdatePrizeV1Request.Validate if the designated constraints aren't met.
type UpdatePrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrizeV1RequestValidationError) ErrorName() string {
	return "UpdatePrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrizeV1RequestValidationError{}

// Validate checks the field values on UpdatePrizeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Succeed

	return nil
}

// UpdatePrizeV1ResponseValidationError is the validation error returned by
// UpdatePrizeV1Response.Validate if the designated constraints aren't met.
type UpdatePrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrizeV1ResponseValidationError) ErrorName() string {
	return "UpdatePrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrizeV1ResponseValidationError{}

// Validate checks the field values on RemovePrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPrizeId() <= 0 {
		return RemovePrizeV1RequestValidationError{
			field:  "PrizeId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemovePrizeV1RequestValidationError is the validation error returned by
// RemovePrizeV1Request.Validate if the designated constraints aren't met.
type RemovePrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePrizeV1RequestValidationError) ErrorName() string {
	return "RemovePrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePrizeV1RequestValidationError{}

// Validate checks the field values on RemovePrizeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemovePrizeV1ResponseValidationError is the validation error returned by
// RemovePrizeV1Response.Validate if the designated constraints aren't met.
type RemovePrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePrizeV1ResponseValidationError) ErrorName() string {
	return "RemovePrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePrizeV1ResponseValidationError{}

// Validate checks the field values on DescribePrizeV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePrizeV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPrizeId() <= 0 {
		return DescribePrizeV1RequestValidationError{
			field:  "PrizeId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribePrizeV1RequestValidationError is the validation error returned by
// DescribePrizeV1Request.Validate if the designated constraints aren't met.
type DescribePrizeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePrizeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePrizeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePrizeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePrizeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePrizeV1RequestValidationError) ErrorName() string {
	return "DescribePrizeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePrizeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePrizeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePrizeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePrizeV1RequestValidationError{}

// Validate checks the field values on DescribePrizeV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePrizeV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPrize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePrizeV1ResponseValidationError{
				field:  "Prize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribePrizeV1ResponseValidationError is the validation error returned by
// DescribePrizeV1Response.Validate if the designated constraints aren't met.
type DescribePrizeV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePrizeV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePrizeV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePrizeV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePrizeV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePrizeV1ResponseValidationError) ErrorName() string {
	return "DescribePrizeV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePrizeV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePrizeV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePrizeV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePrizeV1ResponseValidationError{}

// Validate checks the field values on Prize with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Prize) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IssueId

	// no validation rules for Link

	return nil
}

// PrizeValidationError is the validation error returned by Prize.Validate if
// the designated constraints aren't met.
type PrizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrizeValidationError) ErrorName() string { return "PrizeValidationError" }

// Error satisfies the builtin error interface
func (e PrizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrizeValidationError{}
