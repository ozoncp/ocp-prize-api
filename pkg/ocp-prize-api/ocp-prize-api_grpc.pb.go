// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_prize_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpPrizeApiClient is the client API for OcpPrizeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpPrizeApiClient interface {
	// Return list of prize
	ListPrizeV1(ctx context.Context, in *ListPrizeV1Request, opts ...grpc.CallOption) (*ListPrizeV1Response, error)
	// Return description of prize by id
	DescribePrizeV1(ctx context.Context, in *DescribePrizeV1Request, opts ...grpc.CallOption) (*DescribePrizeV1Response, error)
	// 小reate new prize
	CreatePrizeV1(ctx context.Context, in *CreatePrizeV1Request, opts ...grpc.CallOption) (*CreatePrizeV1Response, error)
	// 小reate few new prizes
	MultiCreatePrizeV1(ctx context.Context, in *MultiCreatePrizeV1Request, opts ...grpc.CallOption) (*MultiCreatePrizeV1Response, error)
	// Update prize
	UpdatePrizeV1(ctx context.Context, in *UpdatePrizeV1Request, opts ...grpc.CallOption) (*UpdatePrizeV1Response, error)
	// Delete prize by id
	RemovePrizeV1(ctx context.Context, in *RemovePrizeV1Request, opts ...grpc.CallOption) (*RemovePrizeV1Response, error)
}

type ocpPrizeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpPrizeApiClient(cc grpc.ClientConnInterface) OcpPrizeApiClient {
	return &ocpPrizeApiClient{cc}
}

func (c *ocpPrizeApiClient) ListPrizeV1(ctx context.Context, in *ListPrizeV1Request, opts ...grpc.CallOption) (*ListPrizeV1Response, error) {
	out := new(ListPrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/ListPrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpPrizeApiClient) DescribePrizeV1(ctx context.Context, in *DescribePrizeV1Request, opts ...grpc.CallOption) (*DescribePrizeV1Response, error) {
	out := new(DescribePrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/DescribePrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpPrizeApiClient) CreatePrizeV1(ctx context.Context, in *CreatePrizeV1Request, opts ...grpc.CallOption) (*CreatePrizeV1Response, error) {
	out := new(CreatePrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/CreatePrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpPrizeApiClient) MultiCreatePrizeV1(ctx context.Context, in *MultiCreatePrizeV1Request, opts ...grpc.CallOption) (*MultiCreatePrizeV1Response, error) {
	out := new(MultiCreatePrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/MultiCreatePrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpPrizeApiClient) UpdatePrizeV1(ctx context.Context, in *UpdatePrizeV1Request, opts ...grpc.CallOption) (*UpdatePrizeV1Response, error) {
	out := new(UpdatePrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/UpdatePrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpPrizeApiClient) RemovePrizeV1(ctx context.Context, in *RemovePrizeV1Request, opts ...grpc.CallOption) (*RemovePrizeV1Response, error) {
	out := new(RemovePrizeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.prize.api.OcpPrizeApi/RemovePrizeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpPrizeApiServer is the server API for OcpPrizeApi service.
// All implementations must embed UnimplementedOcpPrizeApiServer
// for forward compatibility
type OcpPrizeApiServer interface {
	// Return list of prize
	ListPrizeV1(context.Context, *ListPrizeV1Request) (*ListPrizeV1Response, error)
	// Return description of prize by id
	DescribePrizeV1(context.Context, *DescribePrizeV1Request) (*DescribePrizeV1Response, error)
	// 小reate new prize
	CreatePrizeV1(context.Context, *CreatePrizeV1Request) (*CreatePrizeV1Response, error)
	// 小reate few new prizes
	MultiCreatePrizeV1(context.Context, *MultiCreatePrizeV1Request) (*MultiCreatePrizeV1Response, error)
	// Update prize
	UpdatePrizeV1(context.Context, *UpdatePrizeV1Request) (*UpdatePrizeV1Response, error)
	// Delete prize by id
	RemovePrizeV1(context.Context, *RemovePrizeV1Request) (*RemovePrizeV1Response, error)
	mustEmbedUnimplementedOcpPrizeApiServer()
}

// UnimplementedOcpPrizeApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpPrizeApiServer struct {
}

func (UnimplementedOcpPrizeApiServer) ListPrizeV1(context.Context, *ListPrizeV1Request) (*ListPrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) DescribePrizeV1(context.Context, *DescribePrizeV1Request) (*DescribePrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) CreatePrizeV1(context.Context, *CreatePrizeV1Request) (*CreatePrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) MultiCreatePrizeV1(context.Context, *MultiCreatePrizeV1Request) (*MultiCreatePrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreatePrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) UpdatePrizeV1(context.Context, *UpdatePrizeV1Request) (*UpdatePrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) RemovePrizeV1(context.Context, *RemovePrizeV1Request) (*RemovePrizeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrizeV1 not implemented")
}
func (UnimplementedOcpPrizeApiServer) mustEmbedUnimplementedOcpPrizeApiServer() {}

// UnsafeOcpPrizeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpPrizeApiServer will
// result in compilation errors.
type UnsafeOcpPrizeApiServer interface {
	mustEmbedUnimplementedOcpPrizeApiServer()
}

func RegisterOcpPrizeApiServer(s grpc.ServiceRegistrar, srv OcpPrizeApiServer) {
	s.RegisterService(&OcpPrizeApi_ServiceDesc, srv)
}

func _OcpPrizeApi_ListPrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).ListPrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/ListPrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).ListPrizeV1(ctx, req.(*ListPrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpPrizeApi_DescribePrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).DescribePrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/DescribePrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).DescribePrizeV1(ctx, req.(*DescribePrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpPrizeApi_CreatePrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).CreatePrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/CreatePrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).CreatePrizeV1(ctx, req.(*CreatePrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpPrizeApi_MultiCreatePrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreatePrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).MultiCreatePrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/MultiCreatePrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).MultiCreatePrizeV1(ctx, req.(*MultiCreatePrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpPrizeApi_UpdatePrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).UpdatePrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/UpdatePrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).UpdatePrizeV1(ctx, req.(*UpdatePrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpPrizeApi_RemovePrizeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePrizeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpPrizeApiServer).RemovePrizeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.prize.api.OcpPrizeApi/RemovePrizeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpPrizeApiServer).RemovePrizeV1(ctx, req.(*RemovePrizeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpPrizeApi_ServiceDesc is the grpc.ServiceDesc for OcpPrizeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpPrizeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.prize.api.OcpPrizeApi",
	HandlerType: (*OcpPrizeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrizeV1",
			Handler:    _OcpPrizeApi_ListPrizeV1_Handler,
		},
		{
			MethodName: "DescribePrizeV1",
			Handler:    _OcpPrizeApi_DescribePrizeV1_Handler,
		},
		{
			MethodName: "CreatePrizeV1",
			Handler:    _OcpPrizeApi_CreatePrizeV1_Handler,
		},
		{
			MethodName: "MultiCreatePrizeV1",
			Handler:    _OcpPrizeApi_MultiCreatePrizeV1_Handler,
		},
		{
			MethodName: "UpdatePrizeV1",
			Handler:    _OcpPrizeApi_UpdatePrizeV1_Handler,
		},
		{
			MethodName: "RemovePrizeV1",
			Handler:    _OcpPrizeApi_RemovePrizeV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-prize-api/ocp-prize-api.proto",
}
